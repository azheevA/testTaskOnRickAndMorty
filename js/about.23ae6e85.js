"use strict";(self["webpackChunkvue3project"]=self["webpackChunkvue3project"]||[]).push([[594],{4503:function(e,t,u){u.r(t),u.d(t,{default:function(){return p}});var n=u(641);u(2073);const a=e=>((0,n.Qi)("data-v-15b4fcd3"),e=e(),(0,n.jt)(),e),r={class:"about"},o=a((()=>(0,n.Lk)("h1",null,"Тут расписано реализация проекта",-1))),c=a((()=>(0,n.Lk)("div",null,[(0,n.Lk)("p",null,[(0,n.Lk)("u",null,"Заранее извинияюсь, что текст написан в довольно просторечивом ключе."),(0,n.Lk)("br"),(0,n.Lk)("br"),(0,n.Lk)("strong",null,"1. Проблематика."),(0,n.eW)(" Проект написан на фреймворке vue3. Разработка имела для меня много подводных камней при реализации проекта. Во первых, путаница в свойствах в option api, к примеру, не понимал смысл свойства watch, были проблемы с реактивностью во vue(ref, reactive и computed), с некоторыми директивами, не понимание $emit (при передачи данных в родительский компонент) и т.д К тому же, переход на composition api в UI компонентах, реализующих пагинацию и фильтрацию, и их взаимодействие с родительским компонентом "),(0,n.Lk)("br"),(0,n.Lk)("strong",null,"2. Дополнение."),(0,n.eW)(" Описание Также при написании я изучал централизованное хранилище vuex, которое в будущем я хочу реализовать ради опыта. "),(0,n.Lk)("strong",null,"3. Реализация."),(0,n.eW)(" Как вы уже видите, в программе настроен роутинг, который ссылается на два компонента, где первый компонент - это сам проект, а второй - это мое описание об реализации и соответствующие мысли об данном проекте. Для выполнения HTTP-запроса я обратился к помощи fetch api, также имеются знания библиотеки axios. Пагинацию реализовал со скрытием, которое для меня ново. Компонент CardList и дочерний ему элемент CardItem, очевидно выполняют роль визуального вывода данных. ")])],-1))),l=[o,c];var i={__name:"AboutView",setup(e){return(e,t)=>((0,n.uX)(),(0,n.CE)("div",r,l))}},s=u(6262);const k=(0,s.A)(i,[["__scopeId","data-v-15b4fcd3"]]);var p=k}}]);
//# sourceMappingURL=about.23ae6e85.js.map